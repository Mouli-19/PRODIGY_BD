from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, EmailStr, Field
from typing import Dict
from uuid import uuid4, UUID

app = FastAPI()
users_db: Dict[UUID, dict] = {}

class UserCreate(BaseModel):
    name: str
    email: EmailStr
    age: int = Field(..., ge=0)

class User(UserCreate):
    id: UUID

@app.post("/users", response_model=User, status_code=201)
def create_user(user: UserCreate):
    user_id = uuid4()
    new_user = User(id=user_id, **user.dict())
    users_db[user_id] = new_user.dict()
    return new_user

@app.get("/users/{user_id}", response_model=User)
def get_user(user_id: UUID):
    user = users_db.get(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user

@app.put("/users/{user_id}", response_model=User)
def update_user(user_id: UUID, updated: UserCreate):
    if user_id not in users_db:
        raise HTTPException(status_code=404, detail="User not found")
    user = User(id=user_id, **updated.dict())
    users_db[user_id] = user.dict()
    return user

@app.delete("/users/{user_id}", status_code=204)
def delete_user(user_id: UUID):
    if user_id not in users_db:
        raise HTTPException(status_code=404, detail="User not found")
    del users_db[user_id]
